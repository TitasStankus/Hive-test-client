// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HIVE.Commons.Flatbuffers.Generated
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct State : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static State GetRootAsState(ByteBuffer _bb) { return GetRootAsState(_bb, new State()); }
  public static State GetRootAsState(ByteBuffer _bb, State obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyState(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, StateVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public State __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public HIVE.Commons.Flatbuffers.Generated.Payload? Payload(int j) { int o = __p.__offset(4); return o != 0 ? (HIVE.Commons.Flatbuffers.Generated.Payload?)(new HIVE.Commons.Flatbuffers.Generated.Payload()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PayloadLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<HIVE.Commons.Flatbuffers.Generated.State> CreateState(FlatBufferBuilder builder,
      VectorOffset payloadOffset = default(VectorOffset)) {
    builder.StartTable(1);
    State.AddPayload(builder, payloadOffset);
    return State.EndState(builder);
  }

  public static void StartState(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPayload(FlatBufferBuilder builder, VectorOffset payloadOffset) { builder.AddOffset(0, payloadOffset.Value, 0); }
  public static VectorOffset CreatePayloadVector(FlatBufferBuilder builder, Offset<HIVE.Commons.Flatbuffers.Generated.Payload>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePayloadVectorBlock(FlatBufferBuilder builder, Offset<HIVE.Commons.Flatbuffers.Generated.Payload>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePayloadVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<HIVE.Commons.Flatbuffers.Generated.Payload>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePayloadVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<HIVE.Commons.Flatbuffers.Generated.Payload>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPayloadVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.State> EndState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HIVE.Commons.Flatbuffers.Generated.State>(o);
  }
  public static void FinishStateBuffer(FlatBufferBuilder builder, Offset<HIVE.Commons.Flatbuffers.Generated.State> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedStateBuffer(FlatBufferBuilder builder, Offset<HIVE.Commons.Flatbuffers.Generated.State> offset) { builder.FinishSizePrefixed(offset.Value); }
  public StateT UnPack() {
    var _o = new StateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateT _o) {
    _o.Payload = new List<HIVE.Commons.Flatbuffers.Generated.PayloadT>();
    for (var _j = 0; _j < this.PayloadLength; ++_j) {_o.Payload.Add(this.Payload(_j).HasValue ? this.Payload(_j).Value.UnPack() : null);}
  }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.State> Pack(FlatBufferBuilder builder, StateT _o) {
    if (_o == null) return default(Offset<HIVE.Commons.Flatbuffers.Generated.State>);
    var _payload = default(VectorOffset);
    if (_o.Payload != null) {
      var __payload = new Offset<HIVE.Commons.Flatbuffers.Generated.Payload>[_o.Payload.Count];
      for (var _j = 0; _j < __payload.Length; ++_j) { __payload[_j] = HIVE.Commons.Flatbuffers.Generated.Payload.Pack(builder, _o.Payload[_j]); }
      _payload = CreatePayloadVector(builder, __payload);
    }
    return CreateState(
      builder,
      _payload);
  }
}

public class StateT
{
  public List<HIVE.Commons.Flatbuffers.Generated.PayloadT> Payload { get; set; }

  public StateT() {
    this.Payload = null;
  }
  public static StateT DeserializeFromBinary(byte[] fbBuffer) {
    return State.GetRootAsState(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    State.FinishStateBuffer(fbb, State.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class StateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Payload*/, HIVE.Commons.Flatbuffers.Generated.PayloadVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
