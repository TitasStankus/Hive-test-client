// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HIVE.Commons.Flatbuffers.Generated
{

public enum CommandUnion : byte
{
  NONE = 0,
  Owner = 1,
  MoveTo = 2,
  Sleep = 3,
};

public class CommandUnionUnion {
  public CommandUnion Type { get; set; }
  public object Value { get; set; }

  public CommandUnionUnion() {
    this.Type = CommandUnion.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public HIVE.Commons.Flatbuffers.Generated.OwnerT AsOwner() { return this.As<HIVE.Commons.Flatbuffers.Generated.OwnerT>(); }
  public static CommandUnionUnion FromOwner(HIVE.Commons.Flatbuffers.Generated.OwnerT _owner) { return new CommandUnionUnion{ Type = CommandUnion.Owner, Value = _owner }; }
  public HIVE.Commons.Flatbuffers.Generated.MoveToT AsMoveTo() { return this.As<HIVE.Commons.Flatbuffers.Generated.MoveToT>(); }
  public static CommandUnionUnion FromMoveTo(HIVE.Commons.Flatbuffers.Generated.MoveToT _moveto) { return new CommandUnionUnion{ Type = CommandUnion.MoveTo, Value = _moveto }; }
  public HIVE.Commons.Flatbuffers.Generated.SleepT AsSleep() { return this.As<HIVE.Commons.Flatbuffers.Generated.SleepT>(); }
  public static CommandUnionUnion FromSleep(HIVE.Commons.Flatbuffers.Generated.SleepT _sleep) { return new CommandUnionUnion{ Type = CommandUnion.Sleep, Value = _sleep }; }

  public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, CommandUnionUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case CommandUnion.Owner: return HIVE.Commons.Flatbuffers.Generated.Owner.Pack(builder, _o.AsOwner()).Value;
      case CommandUnion.MoveTo: return HIVE.Commons.Flatbuffers.Generated.MoveTo.Pack(builder, _o.AsMoveTo()).Value;
      case CommandUnion.Sleep: return HIVE.Commons.Flatbuffers.Generated.Sleep.Pack(builder, _o.AsSleep()).Value;
    }
  }
}



static public class CommandUnionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((CommandUnion)typeId)
    {
      case CommandUnion.Owner:
        result = HIVE.Commons.Flatbuffers.Generated.OwnerVerify.Verify(verifier, tablePos);
        break;
      case CommandUnion.MoveTo:
        result = HIVE.Commons.Flatbuffers.Generated.MoveToVerify.Verify(verifier, tablePos);
        break;
      case CommandUnion.Sleep:
        result = HIVE.Commons.Flatbuffers.Generated.SleepVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}


}
