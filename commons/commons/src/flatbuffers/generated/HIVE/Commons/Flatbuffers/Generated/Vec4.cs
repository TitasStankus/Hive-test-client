// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HIVE.Commons.Flatbuffers.Generated
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Vec4 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public void MutateW(float w) { __p.bb.PutFloat(__p.bb_pos + 0, w); }
  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public void MutateX(float x) { __p.bb.PutFloat(__p.bb_pos + 4, x); }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public void MutateY(float y) { __p.bb.PutFloat(__p.bb_pos + 8, y); }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }
  public void MutateZ(float z) { __p.bb.PutFloat(__p.bb_pos + 12, z); }

  public static Offset<HIVE.Commons.Flatbuffers.Generated.Vec4> CreateVec4(FlatBufferBuilder builder, float W, float X, float Y, float Z) {
    builder.Prep(4, 16);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    builder.PutFloat(W);
    return new Offset<HIVE.Commons.Flatbuffers.Generated.Vec4>(builder.Offset);
  }
  public Vec4T UnPack() {
    var _o = new Vec4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec4T _o) {
    _o.W = this.W;
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Vec4> Pack(FlatBufferBuilder builder, Vec4T _o) {
    if (_o == null) return default(Offset<HIVE.Commons.Flatbuffers.Generated.Vec4>);
    return CreateVec4(
      builder,
      _o.W,
      _o.X,
      _o.Y,
      _o.Z);
  }
}

public class Vec4T
{
  public float W { get; set; }
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }

  public Vec4T() {
    this.W = 0.0f;
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}


}
