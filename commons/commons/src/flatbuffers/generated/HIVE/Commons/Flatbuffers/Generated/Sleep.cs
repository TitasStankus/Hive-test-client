// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HIVE.Commons.Flatbuffers.Generated
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Sleep : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static Sleep GetRootAsSleep(ByteBuffer _bb) { return GetRootAsSleep(_bb, new Sleep()); }
  public static Sleep GetRootAsSleep(ByteBuffer _bb, Sleep obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sleep __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateId(ulong id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, id); return true; } else { return false; } }
  public ushort Family { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public bool MutateFamily(ushort family) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutUshort(o + __p.bb_pos, family); return true; } else { return false; } }
  public float Duration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MutateDuration(float duration) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutFloat(o + __p.bb_pos, duration); return true; } else { return false; } }
  public bool Sleep_ { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateSleep(bool sleep) { int o = __p.__offset(10); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(sleep ? 1 : 0)); return true; } else { return false; } }

  public static Offset<HIVE.Commons.Flatbuffers.Generated.Sleep> CreateSleep(FlatBufferBuilder builder,
      ulong id = 0,
      ushort family = 0,
      float duration = 0.0f,
      bool sleep = false) {
    builder.StartTable(4);
    Sleep.AddId(builder, id);
    Sleep.AddDuration(builder, duration);
    Sleep.AddFamily(builder, family);
    Sleep.AddSleep(builder, sleep);
    return Sleep.EndSleep(builder);
  }

  public static void StartSleep(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, ulong id) { builder.AddUlong(0, id, 0); }
  public static void AddFamily(FlatBufferBuilder builder, ushort family) { builder.AddUshort(1, family, 0); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(2, duration, 0.0f); }
  public static void AddSleep(FlatBufferBuilder builder, bool sleep) { builder.AddBool(3, sleep, false); }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Sleep> EndSleep(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HIVE.Commons.Flatbuffers.Generated.Sleep>(o);
  }
  public SleepT UnPack() {
    var _o = new SleepT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SleepT _o) {
    _o.Id = this.Id;
    _o.Family = this.Family;
    _o.Duration = this.Duration;
    _o.Sleep_ = this.Sleep_;
  }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Sleep> Pack(FlatBufferBuilder builder, SleepT _o) {
    if (_o == null) return default(Offset<HIVE.Commons.Flatbuffers.Generated.Sleep>);
    return CreateSleep(
      builder,
      _o.Id,
      _o.Family,
      _o.Duration,
      _o.Sleep_);
  }
}

public class SleepT
{
  public ulong Id { get; set; }
  public ushort Family { get; set; }
  public float Duration { get; set; }
  public bool Sleep_ { get; set; }

  public SleepT() {
    this.Id = 0;
    this.Family = 0;
    this.Duration = 0.0f;
    this.Sleep_ = false;
  }
}


static public class SleepVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Family*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 8 /*Duration*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Sleep*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
