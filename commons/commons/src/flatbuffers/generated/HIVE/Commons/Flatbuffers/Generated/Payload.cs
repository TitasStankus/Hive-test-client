// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HIVE.Commons.Flatbuffers.Generated
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Payload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static Payload GetRootAsPayload(ByteBuffer _bb) { return GetRootAsPayload(_bb, new Payload()); }
  public static Payload GetRootAsPayload(ByteBuffer _bb, Payload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Payload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }
  public HIVE.Commons.Flatbuffers.Generated.Entity? GetDataAsEntity() { int o = __p.__offset(4); return o != 0 ? (HIVE.Commons.Flatbuffers.Generated.Entity?)(new HIVE.Commons.Flatbuffers.Generated.Entity()).__assign(__p.__indirect(__p.__vector(o)), __p.bb) : null; }
  public bool MutateData(int j, byte data) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(__p.__vector(o) + j * 1, data); return true; } else { return false; } }

  public static Offset<HIVE.Commons.Flatbuffers.Generated.Payload> CreatePayload(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Payload.AddData(builder, dataOffset);
    return Payload.EndPayload(builder);
  }

  public static void StartPayload(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Payload> EndPayload(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HIVE.Commons.Flatbuffers.Generated.Payload>(o);
  }
  public PayloadT UnPack() {
    var _o = new PayloadT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PayloadT _o) {
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Payload> Pack(FlatBufferBuilder builder, PayloadT _o) {
    if (_o == null) return default(Offset<HIVE.Commons.Flatbuffers.Generated.Payload>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreatePayload(
      builder,
      _data);
  }
}

public class PayloadT
{
  public List<byte> Data { get; set; }

  public PayloadT() {
    this.Data = null;
  }
}


static public class PayloadVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyNestedBuffer(tablePos, 4 /*Data*/, HIVE.Commons.Flatbuffers.Generated.EntityVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
