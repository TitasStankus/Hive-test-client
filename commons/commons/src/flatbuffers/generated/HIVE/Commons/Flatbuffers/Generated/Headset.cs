// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HIVE.Commons.Flatbuffers.Generated
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Headset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_12_23(); }
  public static Headset GetRootAsHeadset(ByteBuffer _bb) { return GetRootAsHeadset(_bb, new Headset()); }
  public static Headset GetRootAsHeadset(ByteBuffer _bb, Headset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Headset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateId(ulong id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, id); return true; } else { return false; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public ushort Subscription { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public bool MutateSubscription(ushort subscription) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutUshort(o + __p.bb_pos, subscription); return true; } else { return false; } }
  public HIVE.Commons.Flatbuffers.Generated.SubscriptionRate Rate { get { int o = __p.__offset(10); return o != 0 ? (HIVE.Commons.Flatbuffers.Generated.SubscriptionRate)__p.bb.GetSbyte(o + __p.bb_pos) : HIVE.Commons.Flatbuffers.Generated.SubscriptionRate.None; } }
  public bool MutateRate(HIVE.Commons.Flatbuffers.Generated.SubscriptionRate rate) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)rate); return true; } else { return false; } }
  public HIVE.Commons.Flatbuffers.Generated.BoundingBox? BoundingBox { get { int o = __p.__offset(12); return o != 0 ? (HIVE.Commons.Flatbuffers.Generated.BoundingBox?)(new HIVE.Commons.Flatbuffers.Generated.BoundingBox()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<HIVE.Commons.Flatbuffers.Generated.Headset> CreateHeadset(FlatBufferBuilder builder,
      ulong id = 0,
      StringOffset nameOffset = default(StringOffset),
      ushort subscription = 0,
      HIVE.Commons.Flatbuffers.Generated.SubscriptionRate rate = HIVE.Commons.Flatbuffers.Generated.SubscriptionRate.None,
      Offset<HIVE.Commons.Flatbuffers.Generated.BoundingBox> bounding_boxOffset = default(Offset<HIVE.Commons.Flatbuffers.Generated.BoundingBox>)) {
    builder.StartTable(5);
    Headset.AddId(builder, id);
    Headset.AddBoundingBox(builder, bounding_boxOffset);
    Headset.AddName(builder, nameOffset);
    Headset.AddSubscription(builder, subscription);
    Headset.AddRate(builder, rate);
    return Headset.EndHeadset(builder);
  }

  public static void StartHeadset(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, ulong id) { builder.AddUlong(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSubscription(FlatBufferBuilder builder, ushort subscription) { builder.AddUshort(2, subscription, 0); }
  public static void AddRate(FlatBufferBuilder builder, HIVE.Commons.Flatbuffers.Generated.SubscriptionRate rate) { builder.AddSbyte(3, (sbyte)rate, 0); }
  public static void AddBoundingBox(FlatBufferBuilder builder, Offset<HIVE.Commons.Flatbuffers.Generated.BoundingBox> boundingBoxOffset) { builder.AddOffset(4, boundingBoxOffset.Value, 0); }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Headset> EndHeadset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HIVE.Commons.Flatbuffers.Generated.Headset>(o);
  }
  public HeadsetT UnPack() {
    var _o = new HeadsetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HeadsetT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Subscription = this.Subscription;
    _o.Rate = this.Rate;
    _o.BoundingBox = this.BoundingBox.HasValue ? this.BoundingBox.Value.UnPack() : null;
  }
  public static Offset<HIVE.Commons.Flatbuffers.Generated.Headset> Pack(FlatBufferBuilder builder, HeadsetT _o) {
    if (_o == null) return default(Offset<HIVE.Commons.Flatbuffers.Generated.Headset>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _bounding_box = _o.BoundingBox == null ? default(Offset<HIVE.Commons.Flatbuffers.Generated.BoundingBox>) : HIVE.Commons.Flatbuffers.Generated.BoundingBox.Pack(builder, _o.BoundingBox);
    return CreateHeadset(
      builder,
      _o.Id,
      _name,
      _o.Subscription,
      _o.Rate,
      _bounding_box);
  }
}

public class HeadsetT
{
  public ulong Id { get; set; }
  public string Name { get; set; }
  public ushort Subscription { get; set; }
  public HIVE.Commons.Flatbuffers.Generated.SubscriptionRate Rate { get; set; }
  public HIVE.Commons.Flatbuffers.Generated.BoundingBoxT BoundingBox { get; set; }

  public HeadsetT() {
    this.Id = 0;
    this.Name = null;
    this.Subscription = 0;
    this.Rate = HIVE.Commons.Flatbuffers.Generated.SubscriptionRate.None;
    this.BoundingBox = null;
  }
}


static public class HeadsetVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Subscription*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 10 /*Rate*/, 1 /*HIVE.Commons.Flatbuffers.Generated.SubscriptionRate*/, 1, false)
      && verifier.VerifyTable(tablePos, 12 /*BoundingBox*/, HIVE.Commons.Flatbuffers.Generated.BoundingBoxVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
